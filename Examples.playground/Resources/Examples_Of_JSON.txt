Note:   comments are not allowed in JSON
see http://www.ietf.org/rfc/rfc4627.txt


---
JSON is a syntax for storing and exchanging data.
JSON is text, written with JavaScript object notation.
JSON stands for JavaScript Object Notation.
---

JSON has two structures:

A collection of name/value pairs. - Object(s)  --
An ordered list of values. - Array(s)          --

---
JSON Objects contain members - Each member is made up of a pair and or members
    A pair containes a name string and a value i.e string : value
JSON Arrays contain elements - Each element is made up of values and or elements
    A value can be a string, number, object, array, true, false, null

object
    {}
    { members }
members
    pair
    pair , members
pair
    string : value

array
    []
    [ elements ]
elements
    value
    value , elements

value
    string, number, object, array, true, false, null
---

An object is an unordered set of name/value pairs. An object begins with { (left brace) and ends with } (right brace). Each name is followed by : (colon) and the name/value pairs are separated by , (comma).


An array is an ordered collection of values. An array begins with [ (left bracket) and ends with ] (right bracket). Values are separated by , (comma).

A value can be a string in double quotes, or a number, or true or false or null, or an object or an array. These structures can be nested.


 name is usually a string, see below for  value options
 value = false / null / true / object / array / number / string
 Each name is followed by : (colon)
 name/value pairs are separated by , (comma)
see http://rfc7159.net/rfc7159

Data is in name/value pairs
Data is separated by commas
Curly braces hold objects
Square brackets hold arrays

---
A string is a sequence of zero or more Unicode characters, wrapped in double quotes, using backslash escapes.
    A character is represented as a single character string.
    A string is very much like a C or Java string.
A number is very much like a C or Java number, except that the octal and hexadecimal formats are not used.

see Syntax diagrams (or railroad diagrams) at http://www.json.org/

Escaping JSON
Backspace is replaced with \b.
Form feed is replaced with \f.
Newline is replaced with \n.
Carriage return is replaced with \r.
Tab is replaced with \t.
Double quote is replaced with \"
Backslash is replaced with \\

---
Some Examples of json data

An Empty object
{}
---
An Empty array
[]
---
three small JSON texts containing only values. Each of them is valid JSON

"Hello world!"

42

true
---
---
JSON data describes an object:
{
color: "red",
value: "#f00"
}

a Person object
{ "name":"John", "City":"Paris", "Height":182.88, "Weight":212}
---
An array of numbers
[1,3,2,4,5]
[ 100, 500, 300, 200, 400 ]
---
An array of strings
["dog", "cat", "mouse", "fox","chicken"]
[ "Ford", "BMW", "Fiat" ]
---
a JSON object that contains and array or cars
{
    "name":"John",
    "age":30,
    "cars":[ "Ford", "BMW", "Fiat" ]
}
---
Values in an array can also be another array, or even another JSON object
{
    "name":"John",
    "age":30,
    "cars": [
        { "name":"Ford", "models":[ "Fiesta", "Focus", "Mustang" ] },
        { "name":"BMW", "models":[ "320", "X3", "X5" ] },
        { "name":"Fiat", "models":[ "500", "Panda" ] }
    ]
}
---
the JSON data describes an array, and each element of that array is an object:
[
    {
        color: "red",
        value: "#f00"
    },
    {
        color: "green",
        value: "#0f0"
    },
    {
        color: "blue",
        value: "#00f"
    },
    {
        color: "cyan",
        value: "#0ff"
    }
]
the JSON Data Set will create
---
---

 a JSON object representing an image:
it contains an image object that has
    width, height, title and thumbnail members
    the thumbnail member contains an object with 3 members - url,width, height
{
    "Image": {
    "Width":  800,
    "Height": 600,
    "Title":  "View from 15th Floor",
    "Thumbnail": {
    "Url":    "http://www.example.com/image/481989943",
    "Height": 125,
    "Width":  100
    },
    "Animated" : false,
    "IDs": [116, 943, 234, 38793]
  }
}
---
This is a JSON array containing two objects:
[
    {
        "precision": "zip",
        "Latitude":  37.7668,
        "Longitude": -122.3959,
        "Address":   "",
        "City":      "SAN FRANCISCO",
        "State":     "CA",
        "Zip":       "94107",
        "Country":   "US"
    },
    {
        "precision": "zip",
        "Latitude":  37.371991,
        "Longitude": -122.026020,
        "Address":   "",
        "City":      "SUNNYVALE",
        "State":     "CA",
        "Zip":       "94085",
        "Country":   "US"
    }
]
---
A JSON object of an employee
{
    "employee":{ "name":"John", "age":30, "city":"New York" }
}
---
A JSON object of employees, it contains an arry of employees {
{
    "employees":[ "John", "Anna", "Peter" ]
}
---
a JSON object with a value that is another JSON object.
{
    "name":"John",
    "age":30,
    "cars": {
    "car1":"Ford",
    "car2":"BMW",
    "car3":"Fiat"
    }
}


